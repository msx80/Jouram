package com.github.msx80.jouram;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import com.github.msx80.jouram.core.JouramException;
import com.github.msx80.jouram.core.fs.impl.mem.MemoryFileSystem;
import com.github.msx80.jouram.core.utils.SerializationEngine;
import com.github.msx80.jouram.examples.simple.StringDb;
import com.github.msx80.jouram.examples.simple.StringDbImpl;

class ReopenTest extends BaseTest {

	@ParameterizedTest
	@MethodSource("provideParameters2")
	void openTwice(Class<? extends SerializationEngine> cls, boolean async) throws Exception {
		MemoryFileSystem mfs = new MemoryFileSystem();
		Counter db = Jouram.setup(Counter.class, new CounterImpl()).async(async).folder(mfs.getFile("folder")).open();
		try
		{
			Exception e = assertThrows(JouramException.class, () -> Jouram.setup(Counter.class, new CounterImpl()).async(async).folder(mfs.getFile("folder")).open());
			assertTrue(e.getMessage().contains("A database with name 'Counter' is already open"));
		}
		finally
		{
			Jouram.close(db);
		}
	}
	@ParameterizedTest
	@MethodSource("provideParameters2")
	void openCloseReopen(Class<? extends SerializationEngine> cls, boolean async) throws Exception {
		MemoryFileSystem mfs = new MemoryFileSystem();
		{
			Counter db = Jouram
					.setup(Counter.class, new CounterImpl())
					.folder(mfs.getFile("folder"))
					.async(async)
					.open();
			try
			{
				db.increment(10);
			}
			finally
			{
				Jouram.close(db);
			}
		}
		{
			Counter db = Jouram.setup(Counter.class, new CounterImpl()).async(async).folder(mfs.getFile("folder")).open();
			try
			{
				db.increment(10);
			}
			finally
			{
				Jouram.close(db);
			}
		}
	}
	
	
	@ParameterizedTest
	@MethodSource("provideParameters2")
	void openExceptReopen(Class<? extends SerializationEngine> cls, boolean async) throws Exception {
		
		
		MemoryFileSystem mfs = new MemoryFileSystem();
		{
			final StringDb db = Jouram.open(mfs.getFile("mypath"), "demo", StringDb.class, new StringDbImpl(), cls.newInstance(), async);
			assertEquals(db.all(), list());
			db.add("ciao");
			db.add("second");
			Jouram.sync(db);
			assertEquals(db.all(), list("ciao", "second"));
			
			mfs.breakAll();
			
			if(async) {
				db.add("boom"); // this goes well becouse it's asyncronous
				
				// wait for the worker to process the queue
				while(getWorkerThread("demo")!=null) {Thread.sleep(10);}
				
				// now any action will throw the previous exception
				Exception e = assertThrows(JouramException.class, () -> db.add("ciao"));
				assertTrue(e.getMessage().contains("Jouram previously encountered an exception"));
				assertTrue(e.getCause().getMessage().contains("Could not write journal for method call"));
				assertTrue(e.getCause().getCause().getMessage().contains("File is broken"));
			}
			else
			{
				Exception e = assertThrows(JouramException.class, () -> db.add("ciao"));
				assertTrue(e.getMessage().contains("Could not write journal for method call"));
				assertTrue(e.getCause().getMessage().contains("File is broken"));	
				
			}
			
			
		}
		final StringDb db = Jouram.open(mfs.getFile("mypath"), "demo", StringDb.class, new StringDbImpl(), cls.newInstance(), async);
		try {
			assertTrue(db.all().contains("ciao"));
		}
		finally
		{
			Jouram.close(db);
		}
		
	}
	


}
